{"version":3,"sources":["../src/app.js"],"names":["graph","Graph","v","addVertex","u","w","z","e","addEdge","g","f","i","x","y","t","a","b","c","forest","console","log","path"],"mappings":";;AACA;;;;AACA;;;;AAFA;AAIA,IAAIA,QAAQ,IAAIC,sBAAJ,EAAZ;;AAEA;AACA;AACA,IAAIC,IAAIF,MAAMG,SAAN,CAAgB,GAAhB,CAAR;AACA,IAAIC,IAAIJ,MAAMG,SAAN,CAAgB,GAAhB,CAAR;AACA,IAAIE,IAAIL,MAAMG,SAAN,CAAgB,GAAhB,CAAR;AACA,IAAIG,IAAIN,MAAMG,SAAN,CAAgB,GAAhB,CAAR;;AAEA;AACA,IAAII,IAAIP,MAAMQ,OAAN,CAAcN,CAAd,EAAiBE,CAAjB,EAAoB,GAApB,CAAR;AACA,IAAIK,IAAIT,MAAMQ,OAAN,CAAcJ,CAAd,EAAiBC,CAAjB,EAAoB,GAApB,CAAR;AACA,IAAIK,IAAIV,MAAMQ,OAAN,CAAcN,CAAd,EAAiBG,CAAjB,EAAoB,GAApB,CAAR;AACA,IAAIM,IAAIX,MAAMQ,OAAN,CAAcH,CAAd,EAAiBC,CAAjB,EAAoB,GAApB,CAAR;;AAEA;AACA;AACA,IAAIM,IAAIZ,MAAMG,SAAN,CAAgB,GAAhB,CAAR;AACA,IAAIU,IAAIb,MAAMG,SAAN,CAAgB,GAAhB,CAAR;AACA,IAAIW,IAAId,MAAMG,SAAN,CAAgB,GAAhB,CAAR;;AAEA;AACA,IAAIY,IAAIf,MAAMQ,OAAN,CAAcI,CAAd,EAAiBC,CAAjB,EAAoB,GAApB,CAAR;AACA,IAAIG,IAAIhB,MAAMQ,OAAN,CAAcK,CAAd,EAAiBC,CAAjB,EAAoB,GAApB,CAAR;AACA,IAAIG,IAAIjB,MAAMQ,OAAN,CAAcM,CAAd,EAAiBF,CAAjB,EAAoB,GAApB,CAAR;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAIM,SAAS,iCAAalB,KAAb,CAAb;AACAmB,QAAQC,GAAR,CAAYF,MAAZ;;AAEA,IAAIG,OAAO,kCAAcnB,CAAd,EAAiBU,CAAjB,EAAoBM,MAApB,CAAX,C,CAAuC;;AAEvCC,QAAQC,GAAR,CAAYC,IAAZ","file":"app.js","sourcesContent":["// import Graph from './components/graph.map/GraphMap';\r\nimport Graph from './components/graph.list.map/GraphListMap';\r\nimport { DFS, constructPath, BFS, DFS_complete } from './util/graphOpration';\r\n\r\nlet graph = new Graph()\r\n\r\n// Sub-Graph 1\r\n// Verteces\r\nlet v = graph.addVertex('v')\r\nlet u = graph.addVertex('u')\r\nlet w = graph.addVertex('w')\r\nlet z = graph.addVertex('z')\r\n\r\n//Edges\r\nlet e = graph.addEdge(v, u, \"e\")\r\nlet g = graph.addEdge(u, w, \"g\")\r\nlet f = graph.addEdge(v, w, \"f\")\r\nlet i = graph.addEdge(w, z, \"i\")\r\n\r\n// Sub-Graph 2\r\n//Verteces\r\nlet x = graph.addVertex(\"x\")\r\nlet y = graph.addVertex(\"y\")\r\nlet t = graph.addVertex(\"t\")\r\n\r\n//Edges\r\nlet a = graph.addEdge(x, y, \"a\")\r\nlet b = graph.addEdge(y, t, \"b\")\r\nlet c = graph.addEdge(t, x, \"c\")\r\n\r\n// let vertices = graph.vertices()\r\n\r\n// for( let vertex of vertices ) {\r\n//     console.log(vertex.element);\r\n// }\r\n\r\nlet forest = DFS_complete(graph)\r\nconsole.log(forest)\r\n\r\nlet path = constructPath(v, x, forest) // Erro : edges = edge.opposite(vertex) caminho para arvores n√£o conectadas \r\n\r\nconsole.log(path)"]}