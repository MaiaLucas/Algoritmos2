{"version":3,"sources":["../../src/util/graphOpration.js"],"names":["DFS","graph","vertex","discovered","incidentEdge","forEach","opposite","edge","has","set"],"mappings":";;;;;AAAO,IAAMA,oBAAM,SAANA,GAAM,CAACC,KAAD,EAAQC,MAAR,EAAgBC,UAAhB,EAA+B;AAAE;AAChDF,UAAMG,YAAN,CAAmBF,MAAnB,EAA2BG,OAA3B,CAAoC,gBAAQ;AACxC,YAAIC,WAAWC,KAAKD,QAAL,CAAcJ,MAAd,CAAf;;AAEA,YAAI,CAACC,WAAWK,GAAX,CAAeF,QAAf,CAAL,EAAgC;AAC5BH,uBAAWM,GAAX,CAAeH,QAAf,EAAyBC,IAAzB;AACAP,gBAAIC,KAAJ,EAAWK,QAAX,EAAqBH,UAArB;AACH;AACJ,KAPD;AAQH,CATM","file":"graphOpration.js","sourcesContent":["export const DFS = (graph, vertex, discovered) => { //Busca em profundidade \r\n    graph.incidentEdge(vertex).forEach( edge => {\r\n        let opposite = edge.opposite(vertex)\r\n\r\n        if( !discovered.has(opposite) ) {\r\n            discovered.set(opposite, edge)\r\n            DFS(graph, opposite, discovered)\r\n        }\r\n    } );\r\n}"]}