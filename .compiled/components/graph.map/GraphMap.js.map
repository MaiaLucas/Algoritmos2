{"version":3,"sources":["../../../src/components/graph.map/GraphMap.js"],"names":["Graph","directed","_outgoing","Map","_directed","_incoming","element","vertex","Vertex","set","origin","destination","edge","Edge","get","_verteces","forEach","console","log","adjacencyList"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,K;AACjB,qBAA6B;AAAA,YAAjBC,QAAiB,uEAAN,KAAM;;AAAA;;AACzB,aAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB,CADyB,CACE;AAC3B,aAAKC,SAAL,GAAiBH,QAAjB;AACA,YAAI,KAAKG,SAAT,EAAqB;AACjB,iBAAKC,SAAL,GAAiB,IAAIF,GAAJ,EAAjB,CADiB,CACU;AAC9B;AACJ;;;;kCAESG,O,EAAS;AAAE;AACjB,gBAAIC,SAAS,IAAIC,mBAAJ,CAAWF,OAAX,CAAb;AACA,iBAAKJ,SAAL,CAAeO,GAAf,CAAmBF,MAAnB,EAA2B,IAAIJ,GAAJ,EAA3B;;AAEA,gBAAI,KAAKC,SAAT,EAAqB;AACjB,qBAAKC,SAAL,CAAeI,GAAf,CAAmBF,MAAnB,EAA2B,IAAIJ,GAAJ,EAA3B;AACH;;AAED,mBAAOI,MAAP;AACH;;;gCAEOG,M,EAAQC,W,EAA6B;AAAA,gBAAhBL,OAAgB,uEAAN,IAAM;;AACzC,gBAAIM,OAAO,IAAIC,iBAAJ,CAASH,MAAT,EAAiBC,WAAjB,EAA8BL,OAA9B,CAAX;;AAEA,iBAAKJ,SAAL,CAAeY,GAAf,CAAmBJ,MAAnB,EAA2BD,GAA3B,CAA+BE,WAA/B,EAA4CC,IAA5C;;AAEA,gBAAI,CAAC,KAAKR,SAAV,EAAsB;AAClB,qBAAKF,SAAL,CAAeY,GAAf,CAAmBH,WAAnB,EAAgCF,GAAhC,CAAoCC,MAApC,EAA4CE,IAA5C;AACH,aAFD,MAEO;AACH,qBAAKP,SAAL,CAAeS,GAAf,CAAmBH,WAAnB,EAAgCF,GAAhC,CAAoCC,MAApC,EAA4CE,IAA5C;AACH;;AAED,mBAAOA,IAAP;AACH;;;qCAEYL,M,EAAQ;AACjB,mBAAO,KAAKL,SAAL,CAAeY,GAAf,CAAmBP,MAAnB,CAAP;AACH;;;wCAEe;;AAEZ,iBAAKQ,SAAL,CAAeC,OAAf,CAAwB;AAAA,uBAAUC,QAAQC,GAAR,CAAYX,OAAOY,aAAP,EAAZ,CAAV;AAAA,aAAxB;AACH;;;;;;kBAzCgBnB,K","file":"GraphMap.js","sourcesContent":["import Vertex from './VertexMap'\r\nimport Edge from './EdgeMap'\r\n\r\nexport default class Graph {\r\n    constructor(directed = false){\r\n        this._outgoing = new Map() // quando nÃ£o for direcionado\r\n        this._directed = directed\r\n        if( this._directed ) {\r\n            this._incoming = new Map() // quando for direcionado\r\n        }\r\n    }\r\n\r\n    addVertex(element) { // IGUAL\r\n        let vertex = new Vertex(element)\r\n        this._outgoing.set(vertex, new Map())\r\n\r\n        if( this._directed ) {\r\n            this._incoming.set(vertex, new Map())\r\n        }\r\n\r\n        return vertex\r\n    }\r\n\r\n    addEdge(origin, destination, element = null) { \r\n        let edge = new Edge(origin, destination, element)\r\n\r\n        this._outgoing.get(origin).set(destination, edge)\r\n        \r\n        if( !this._directed ) {\r\n            this._outgoing.get(destination).set(origin, edge)\r\n        } else {\r\n            this._incoming.get(destination).set(origin, edge)\r\n        }\r\n\r\n        return edge\r\n    }\r\n\r\n    incidentEdge(vertex) {\r\n        return this._outgoing.get(vertex)\r\n    }\r\n\r\n    adjacencyList() {\r\n\r\n        this._verteces.forEach( vertex => console.log(vertex.adjacencyList()) )\r\n    }\r\n}\r\n"]}