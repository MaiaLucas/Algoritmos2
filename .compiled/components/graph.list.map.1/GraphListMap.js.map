{"version":3,"sources":["../../../src/components/graph.list.map.1/GraphListMap.js"],"names":["Graph","directed","_outgoing","Map","_directed","_incoming","element","vertex","Vertex","set","origin","destination","edge","Edge","get","push","_verteces","forEach","console","log","adjacencyList"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,K;AACjB,qBAA6B;AAAA,YAAjBC,QAAiB,uEAAN,KAAM;;AAAA;;AACzB,aAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB,CADyB,CACE;AAC3B,aAAKC,SAAL,GAAiBH,QAAjB;AACA,YAAI,KAAKG,SAAT,EAAqB;AACjB,iBAAKC,SAAL,GAAiB,IAAIF,GAAJ,EAAjB,CADiB,CACU;AAC9B;AACJ;;;;kCAESG,O,EAAS;AAAE;AACjB,gBAAIC,SAAS,IAAIC,uBAAJ,CAAWF,OAAX,CAAb;AACA,iBAAKJ,SAAL,CAAeO,GAAf,CAAmBF,MAAnB,EAA2B,EAA3B;;AAEA,gBAAI,KAAKH,SAAT,EAAqB;AACjB,qBAAKC,SAAL,CAAeI,GAAf,CAAmBF,MAAnB,EAA2B,EAA3B;AACH;;AAED,mBAAOA,MAAP;AACH;;;gCAEOG,M,EAAQC,W,EAA6B;AAAA,gBAAhBL,OAAgB,uEAAN,IAAM;;AACzC,gBAAIM,OAAO,IAAIC,qBAAJ,CAASH,MAAT,EAAiBC,WAAjB,CAAX;;AAEA,iBAAKT,SAAL,CAAeY,GAAf,CAAmBJ,MAAnB,EAA2BK,IAA3B,CAAgCH,IAAhC;;AAEA,gBAAI,CAAC,KAAKR,SAAV,EAAsB;AAClB,qBAAKF,SAAL,CAAeY,GAAf,CAAmBH,WAAnB,EAAgCI,IAAhC,CAAqCH,IAArC;AACH,aAFD,MAEO;AACH,qBAAKP,SAAL,CAAeS,GAAf,CAAmBH,WAAnB,EAAgCI,IAAhC,CAAqCH,IAArC;AACH;;AAED,mBAAOA,IAAP;AACH;;;qCAEYL,M,EAAQ;AACjB,mBAAO,KAAKL,SAAL,CAAeY,GAAf,CAAmBP,MAAnB,CAAP;AACH;;;wCAEe;;AAEZ,iBAAKS,SAAL,CAAeC,OAAf,CAAwB;AAAA,uBAAUC,QAAQC,GAAR,CAAYZ,OAAOa,aAAP,EAAZ,CAAV;AAAA,aAAxB;AACH;;;;;;kBAzCgBpB,K","file":"GraphListMap.js","sourcesContent":["import Vertex from './VertexListMap'\r\nimport Edge from './EdgeListMap'\r\n\r\nexport default class Graph {\r\n    constructor(directed = false){\r\n        this._outgoing = new Map() // quando nÃ£o for direcionado\r\n        this._directed = directed\r\n        if( this._directed ) {\r\n            this._incoming = new Map() // quando for direcionado\r\n        }\r\n    }\r\n\r\n    addVertex(element) { // IGUAL\r\n        let vertex = new Vertex(element)\r\n        this._outgoing.set(vertex, [])\r\n\r\n        if( this._directed ) {\r\n            this._incoming.set(vertex, [])\r\n        }\r\n\r\n        return vertex\r\n    }\r\n\r\n    addEdge(origin, destination, element = null) { \r\n        let edge = new Edge(origin, destination)\r\n\r\n        this._outgoing.get(origin).push(edge)\r\n        \r\n        if( !this._directed ) {\r\n            this._outgoing.get(destination).push(edge)\r\n        } else {\r\n            this._incoming.get(destination).push(edge)\r\n        }\r\n\r\n        return edge\r\n    }\r\n\r\n    incidentEdge(vertex) {\r\n        return this._outgoing.get(vertex)\r\n    }\r\n\r\n    adjacencyList() {\r\n\r\n        this._verteces.forEach( vertex => console.log(vertex.adjacencyList()) )\r\n    }\r\n}\r\n"]}