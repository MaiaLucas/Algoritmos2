{"version":3,"sources":["../../../src/components/tree/node.js"],"names":["Node","key","parent","leftChild","rightChild","isRoot","depth","isLeaf","hasBothChildren","Math","max","height","hasLeftChild"],"mappings":";;;;;;;;;;IAAqBA,I;AACjB,kBAAYC,GAAZ,EAA8B;AAAA,YAAbC,MAAa,uEAAN,IAAM;;AAAA;;AAC1B,aAAKD,GAAL,GAAWA,GAAX;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACA,aAAKC,UAAL,GAAkB,IAAlB;AACH;;;;iCAEQ;AACL,mBAAQ,KAAKD,SAAL,IAAkB,IAAlB,IAA0B,KAAKC,UAAL,IAAmB,IAArD;AACH;;;0CAEiB;AACd,mBAAQ,KAAKD,SAAL,KAAmB,IAAnB,IAA2B,KAAKC,UAAL,KAAoB,IAAvD;AACH;;;sCAEa;AACV,mBAAO,KAAKF,MAAL,CAAYC,SAAZ,KAA0B,IAAjC;AACH;;;uCAEc;AACX,mBAAO,KAAKD,MAAL,CAAYE,UAAZ,KAA2B,IAAlC;AACH;;;uCAEc;AACX,mBAAO,KAAKD,SAAL,KAAmB,IAA1B;AACH;;;wCAEe;AACZ,mBAAO,KAAKC,UAAL,KAAoB,IAA3B;AACH;;;iCAEQ;AACL,mBAAO,KAAKF,MAAL,IAAe,IAAtB;AACH;;;gCAEO;AACJ,gBAAG,KAAKG,MAAL,EAAH,EAAkB,OAAO,CAAP;AAClB,mBAAO,IAAI,KAAKH,MAAL,CAAYI,KAAZ,EAAX;AACH;;;iCAEQ;AACL,gBAAI,KAAKC,MAAL,EAAJ,EAAoB,OAAO,CAAP;AACpB,gBAAI,KAAKC,eAAL,EAAJ,EAA6B;AACzB,uBAAO,IAAIC,KAAKC,GAAL,CAAU,KAAKP,SAAL,CAAeQ,MAAf,EAAV,EAAmC,KAAKP,UAAL,CAAgBO,MAAhB,EAAnC,CAAX;AACH,aAFD,MAEO;AACH,oBAAI,KAAKC,YAAL,EAAJ,EAA0B,OAAO,IAAI,KAAKT,SAAL,CAAeQ,MAAf,EAAX,CAA1B,KACK,OAAO,IAAI,KAAKP,UAAL,CAAgBO,MAAhB,EAAX;AACR;AACJ;;;;;;kBAjDgBX,I","file":"node.js","sourcesContent":["export default class Node {\r\n    constructor(key, parent=null) {\r\n        this.key = key;\r\n        this.parent = parent;\r\n        this.leftChild = null;\r\n        this.rightChild = null;\r\n    }\r\n\r\n    isLeaf() {\r\n        return (this.leftChild == null && this.rightChild == null)\r\n    }\r\n\r\n    hasBothChildren() {\r\n        return (this.leftChild !== null && this.rightChild !== null)\r\n    }\r\n\r\n    isLeftChild() {\r\n        return this.parent.leftChild === this\r\n    }\r\n\r\n    isRightChild() {\r\n        return this.parent.rightChild === this\r\n    }\r\n    \r\n    hasLeftChild() {\r\n        return this.leftChild !== null\r\n    }\r\n\r\n    hasRightChild() {\r\n        return this.rightChild !== null\r\n    }\r\n\r\n    isRoot() {\r\n        return this.parent == null\r\n    }\r\n\r\n    depth() {\r\n        if(this.isRoot()) return 0\r\n        return 1 + this.parent.depth()\r\n    }\r\n\r\n    height() {\r\n        if( this.isLeaf() ) return 0;\r\n        if( this.hasBothChildren() ) {\r\n            return 1 + Math.max( this.leftChild.height(), this.rightChild.height() )\r\n        } else {\r\n            if( this.hasLeftChild() ) return 1 + this.leftChild.height();\r\n            else return 1 + this.rightChild.height();\r\n        }\r\n    }\r\n\r\n}\r\n"]}