{"version":3,"sources":["../../../src/components/tree/binarySearchTree.js"],"names":["BinarySearchTree","root","key","Node","addNode","otherAddNode","node","hasLeftChild","leftChild","hasRightChild","rightChild","child","searchNode","operation","preOrderNode","posOrderNode","inOrderNode","breadthSearchfirstNode","queue","push","length","next","shift","found","search","isLeaf","isLeftChild","parent","hasBothChildren","maximumNode","maximum","minimumNode","minimum"],"mappings":"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","file":"binarySearchTree.js","sourcesContent":["import Node from './node';\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n    //--- Method Add\r\n    add(key) {\r\n        if (this.root == null) {\r\n            this.root = new Node(key);\r\n        } else {\r\n            this.addNode(this.root, key);\r\n        }\r\n    }\r\n\r\n    otherAdd(key) {\r\n        if (this.root == null) {\r\n            this.root = new Node(key);\r\n        } else {\r\n            this.otherAddNode(this.root, key);\r\n        }\r\n    }\r\n\r\n    addNode(node, key) {\r\n        if (key < node.key) {\r\n            if (!node.hasLeftChild()) {\r\n                node.leftChild = new Node(key, node);\r\n            } else {\r\n            this.addNode(node.leftChild, key);\r\n            }\r\n        } else { \r\n            if (!node.hasRightChild()) {\r\n                node.rightChild = new Node(key, node);\r\n            } else {\r\n            this.addNode(node.rightChild, key);\r\n            }\r\n        }\r\n    }\r\n   \r\n    otherAddNode(node, key) {\r\n        let child = (key < node.key) ? 'leftChild' : 'rightChild'\r\n        if (node[child] == null) {\r\n            node[child] = new Node(key, node);\r\n        } else {\r\n            this.otherAddNode(node[child], key);\r\n        }\r\n    }\r\n\r\n    //--- Method Search\r\n    search(key) {\r\n        return this.searchNode(this.root, key)\r\n    }\r\n\r\n    searchNode(node, key) {\r\n        if (node == null) return null;\r\n        if (key < node.key) {\r\n            return (this.searchNode(node.leftChild, key))\r\n        }\r\n        if (key > node.key) {\r\n            return (this.searchNode(node.rightChild, key))\r\n        }\r\n        return node;\r\n    }\r\n\r\n    //--- Method Ordination\r\n    preOrder(operation) {\r\n        this.preOrderNode(this.root, operation)\r\n    }\r\n\r\n    preOrderNode(node, operation) {\r\n        if (node !== null) {\r\n            operation(node)\r\n            this.preOrderNode(node.leftChild, operation)\r\n            this.preOrderNode(node.rightChild, operation)\r\n        }\r\n    }\r\n\r\n    posOrder(operation) {\r\n        this.posOrderNode(this.root, operation)\r\n    }\r\n\r\n    posOrderNode(node, operation) {\r\n        if (node !== null) {\r\n            this.preOrderNode(node.leftChild, operation)\r\n            this.preOrderNode(node.rightChild, operation)\r\n            operation(node)\r\n        }\r\n    }\r\n\r\n    inOrder(operation) {\r\n        this.inOrderNode(this.root, operation)\r\n    }\r\n\r\n    inOrderNode(node, operation) {\r\n        if (node !== null) {\r\n            this.inOrderNode(node.leftChild, operation)\r\n            operation(node)\r\n            this.inOrderNode(node.rightChild, operation)\r\n        }\r\n    }\r\n\r\n    breadthSearchfirst(operation) {\r\n        this.breadthSearchfirstNode(this.root, operation)\r\n    }\r\n\r\n    breadthSearchfirstNode(node, operation) {\r\n        let queue = []\r\n        queue.push(node)\r\n\r\n        while (queue.length > 0) {\r\n            let next = queue.shift()\r\n            operation(next)\r\n            if (next.hasLeftChild())\r\n                queue.push(next.leftChild)\r\n            if (next.hasRightChild())\r\n                queue.push(next.rightChild)\r\n        }\r\n    }\r\n\r\n    //--- Method Remove\r\n    remove(key) {\r\n        let found = this.search(key)\r\n        if (found) {\r\n            if (found.isLeaf()) {\r\n                if (found.isLeftChild()) {\r\n                    found.parent.leftChild = null;\r\n                } else {\r\n                    found.parent.rightChild = null;\r\n                }\r\n                found.parent = null;\r\n            } else if (found.hasBothChildren()) {\r\n            /*Menor impacto poss√≠vel, a maior/menor raiz da menor/maior subarvore */\r\n\r\n            } else {\r\n                if (found.isLeftChild()) {\r\n                    if (found.hasLeftChild()) {\r\n                        found.parent.leftChild = found.leftChild;\r\n                        found.leftChild.parent = found.parent;\r\n                        found.leftChild = null;\r\n                    } else {\r\n                        found.parent.leftChild = found.rightChild;\r\n                        found.rightChild.parent = found.parent;\r\n                        found.rightChild = null;\r\n                    }\r\n                } else {\r\n                    if (found.hasLeftChild()) {\r\n                        found.parent.rightChild = found.leftChild;\r\n                        found.leftChild.parent = found.parent;\r\n                        found.leftChild = null;\r\n                    } else {\r\n                        found.parent.rightChild = found.rightChild;\r\n                        found.rightChild.parent = found.parent;\r\n                        found.rightChild = null;\r\n                    }\r\n                }\r\n                        found.parent = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //--- Method Maximum node\r\n    maximum() {\r\n        return this.maximumNode(this.root);\r\n    }\r\n\r\n    maximumNode(node) {\r\n        let maximum = node;\r\n\r\n        while( maximum.hasRightChild() ) {\r\n            maximum = maximum.rightChild;\r\n        }\r\n\r\n        return maximum;\r\n    }\r\n\r\n    //--- Method Minimum node\r\n    minimum() {\r\n        return this.minimumNode(this.root);\r\n    }\r\n\r\n    minimumNode(node) {\r\n        let minimum = node\r\n        while( minimum.hasLeftChild() ) {\r\n            minimum = minimum.leftChild;\r\n        }\r\n\r\n        return minimum;\r\n    }\r\n}\r\n"]}