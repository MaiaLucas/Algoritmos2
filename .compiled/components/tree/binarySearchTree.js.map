{"version":3,"sources":["../../../src/components/tree/binarySearchTree.js"],"names":["BinarySearchTree","root","key","Node","addNode","otherAddNode","node","hasLeftChild","leftChild","hasRightChild","rightChild","child","searchNode"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,gB;AACjB,gCAAc;AAAA;;AACV,aAAKC,IAAL,GAAY,IAAZ;AACH;;;;4BAEGC,G,EAAK;AACL,gBAAI,KAAKD,IAAL,IAAa,IAAjB,EAAuB;AACnB,qBAAKA,IAAL,GAAY,IAAIE,cAAJ,CAASD,GAAT,CAAZ;AACH,aAFD,MAEO;AACH,qBAAKE,OAAL,CAAa,KAAKH,IAAlB,EAAwBC,GAAxB;AACH;AACJ;;;iCAEQA,G,EAAK;AACV,gBAAI,KAAKD,IAAL,IAAa,IAAjB,EAAuB;AACnB,qBAAKA,IAAL,GAAY,IAAIE,cAAJ,CAASD,GAAT,CAAZ;AACH,aAFD,MAEO;AACH,qBAAKG,YAAL,CAAkB,KAAKJ,IAAvB,EAA6BC,GAA7B;AACH;AACJ;;;gCAEOI,I,EAAMJ,G,EAAK;AACf,gBAAIA,MAAMI,KAAKJ,GAAf,EAAoB;AAChB,oBAAI,CAACI,KAAKC,YAAL,EAAL,EAA0B;AACtBD,yBAAKE,SAAL,GAAiB,IAAIL,cAAJ,CAASD,GAAT,EAAcI,IAAd,CAAjB;AACH,iBAFD,MAEO;AACP,yBAAKF,OAAL,CAAaE,KAAKE,SAAlB,EAA6BN,GAA7B;AACC;AACJ,aAND,MAMO;AACH,oBAAI,CAACI,KAAKG,aAAL,EAAL,EAA2B;AACvBH,yBAAKI,UAAL,GAAkB,IAAIP,cAAJ,CAASD,GAAT,EAAcI,IAAd,CAAlB;AACH,iBAFD,MAEO;AACP,yBAAKF,OAAL,CAAaE,KAAKI,UAAlB,EAA8BR,GAA9B;AACC;AACJ;AACJ;;;qCAEYI,I,EAAMJ,G,EAAK;AACpB,gBAAIS,QAAST,MAAMI,KAAKJ,GAAZ,GAAmB,WAAnB,GAAiC,YAA7C;AACA,gBAAII,KAAKK,KAAL,KAAe,IAAnB,EAAyB;AACrBL,qBAAKK,KAAL,IAAc,IAAIR,cAAJ,CAASD,GAAT,EAAcI,IAAd,CAAd;AACH,aAFD,MAEO;AACH,qBAAKD,YAAL,CAAkBC,KAAKK,KAAL,CAAlB,EAA+BT,GAA/B;AACH;AACJ;;;+BAEMA,G,EAAK;AACR,mBAAO,KAAKU,UAAL,CAAgB,KAAKX,IAArB,EAA2BC,GAA3B,CAAP;AACH;;;mCAEUI,I,EAAMJ,G,EAAK;AAClB,gBAAII,QAAQ,IAAZ,EAAkB,OAAO,IAAP;AAClB,gBAAIJ,MAAMI,KAAKJ,GAAf,EAAoB;AAChB,uBAAQ,KAAKU,UAAL,CAAgBN,KAAKE,SAArB,EAAgCN,GAAhC,CAAR;AACH;AACD,gBAAIA,MAAMI,KAAKJ,GAAf,EAAoB;AAChB,uBAAQ,KAAKU,UAAL,CAAgBN,KAAKI,UAArB,EAAiCR,GAAjC,CAAR;AACH;AACD,mBAAOI,IAAP;AACH;;;;;;kBA3DgBN,gB","file":"binarySearchTree.js","sourcesContent":["import Node from './node';\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    add(key) {\r\n        if (this.root == null) {\r\n            this.root = new Node(key);\r\n        } else {\r\n            this.addNode(this.root, key);\r\n        }\r\n    }\r\n\r\n    otherAdd(key) {\r\n        if (this.root == null) {\r\n            this.root = new Node(key);\r\n        } else {\r\n            this.otherAddNode(this.root, key);\r\n        }\r\n    }\r\n\r\n    addNode(node, key) {\r\n        if (key < node.key) {\r\n            if (!node.hasLeftChild()) {\r\n                node.leftChild = new Node(key, node);\r\n            } else {\r\n            this.addNode(node.leftChild, key);\r\n            }\r\n        } else { \r\n            if (!node.hasRightChild()) {\r\n                node.rightChild = new Node(key, node);\r\n            } else {\r\n            this.addNode(node.rightChild, key);\r\n            }\r\n        }\r\n    }\r\n   \r\n    otherAddNode(node, key) {\r\n        let child = (key < node.key) ? 'leftChild' : 'rightChild'\r\n        if (node[child] == null) {\r\n            node[child] = new Node(key, node);\r\n        } else {\r\n            this.otherAddNode(node[child], key);\r\n        }\r\n    }\r\n\r\n    search(key) {\r\n        return this.searchNode(this.root, key)\r\n    }\r\n\r\n    searchNode(node, key) {\r\n        if (node == null) return null;\r\n        if (key < node.key) {\r\n            return (this.searchNode(node.leftChild, key))\r\n        }\r\n        if (key > node.key) {\r\n            return (this.searchNode(node.rightChild, key))\r\n        }\r\n        return node;\r\n    }\r\n}\r\n"]}