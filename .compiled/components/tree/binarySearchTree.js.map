{"version":3,"sources":["../../../src/components/tree/binarySearchTree.js"],"names":["BinarySearchTree","root","operation","preOrderNode","node","leftChild","rightChild","posOrderNode","inOrderNode","key","Node","otherAddNode","child","searchNode","breadthSearchFirstNode","queue","push","length","next","shift","hasLeftChild","hasRightChild"],"mappings":"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","file":"binarySearchTree.js","sourcesContent":["import Node from './node';\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    //-- Métodos de percusos de árvore\r\n    //- Pré ordem\r\n    preOrder(operation) {\r\n        this.preOrderNode(this.root, operation);\r\n    }\r\n\r\n    preOrderNode(node, operation) {\r\n\r\n        if( node !== null ) {\r\n            operation(node)\r\n            this.preOrderNode(node.leftChild, operation);\r\n            this.preOrderNode(node.rightChild, operation);\r\n        }\r\n    }\r\n    //- Pós ordem\r\n    posOrder(operation) {\r\n        this.posOrderNode(this.root, operation);\r\n    }\r\n\r\n    posOrderNode(node, operation) { \r\n\r\n        if( node !== null ) {\r\n            this.posOrderNode(node.leftChild, operation);\r\n            this.posOrderNode(node.rightChild, operation);\r\n            operation(node);\r\n        }\r\n    }\r\n    //- Em ordem\r\n    inOrder(operation) {\r\n        this.inOrderNode(this.root, operation);\r\n    }\r\n\r\n    inOrderNode(node, operation) {\r\n        if( node !== null ){\r\n            this.inOrderNode(node.leftChild, operation);\r\n            operation(node);\r\n            this.inOrderNode(node.rightChild, operation);\r\n        }\r\n    }\r\n\r\n    //-- Métodos de adição de elementos\r\n    otherAdd(key) {\r\n        if (this.root == null) {\r\n            this.root = new Node(key);\r\n        } else {\r\n            this.otherAddNode(this.root, key);\r\n        }\r\n    }\r\n   \r\n    otherAddNode(node, key) {\r\n        let child = (key < node.key) ? 'leftChild' : 'rightChild'\r\n        if (node[child] == null) {\r\n            node[child] = new Node(key, node);\r\n        } else {\r\n            this.otherAddNode(node[child], key);\r\n        }\r\n    }\r\n\r\n    //-- Métodos de pesquisa\r\n    search(key) {\r\n        return this.searchNode(this.root, key)\r\n    }\r\n\r\n    searchNode(node, key) {\r\n        if (node == null) return null;\r\n        if (key < node.key) {\r\n            return (this.searchNode(node.leftChild, key))\r\n        }\r\n        if (key > node.key) {\r\n            return (this.searchNode(node.rightChild, key))\r\n        }\r\n        return node;\r\n    }\r\n\r\n    //-- Largura\r\n    breadthSearchFirst(operation) {\r\n        this.breadthSearchFirstNode(this.root, operation);\r\n    }\r\n\r\n    breadthSearchFirstNode(node, operation) {\r\n        \r\n        let queue = [];\r\n        queue.push(node);\r\n\r\n        while(queue.length > 0) {\r\n            let next = queue.shift();\r\n            operation(next);\r\n            \r\n            if( next.hasLeftChild() ) {\r\n                queue.push(next.leftChild);\r\n            }\r\n            if( next.hasRightChild() ) {\r\n                queue.push(next.rightChild);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"]}